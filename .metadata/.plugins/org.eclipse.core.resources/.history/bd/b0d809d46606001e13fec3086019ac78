package com.coding404.user.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

public class UserDAO {

	//싱글톤 형태의 클래스로 생성하는 편이 좋다.
	//1. 나 자신의 객체를 스태틱으로 선언.
	private static UserDAO instance = new UserDAO(); //현재 객체 하나

	//2. 직접 생성하지 못하도록 생성자 제한
	private UserDAO() {		
		//DB접속을 위한 드라이버가 필요하다		
		//Class.forName("오라클 드라이버");

		//생성자에서 드라이버 클래스 호출했다가 ->try 구문으로 넣어줌
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (Exception e) {

		}

	}

	//3. getter를 통해서 객체를 반환 - 리턴타입이 UserDAO
	public static UserDAO getInstance() { //안에 있는 객체 하나 반환
		return instance;
	}


	//데이터베이스 연결 주소
	//+오라클 커넥터
	private String url = "jdbc:oracle:thin:@localhost:1521:xe";
	private String uid = "JSP";
	private String upw = "JSP";

	/**
	 * 
	 * @author 20230608 홍길동 중복검사
	 */
	//DB - ID 중복검사 - 반환은 정수가 되어야 한다.	
	public int idCheck(String id) {

		int result = 1; //0?

		String sql = "select * from users where id = ?";

		//DB연결시 필요한 객체 3가지		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			//드라이버 클래스 호출 했다가 다시 위에서...=.=;
			//Class.forName("oracle.jdbc.driver.OracleDriver");

			//커넥션 타입 변수에 저장하고 커넥션타입 반환
			//1. Connector - DB연결
			conn = DriverManager.getConnection(url, uid, upw);

			//2. Pstmt - sql을 실행하기 위한 클래스
			pstmt = conn.prepareStatement(sql);
			//? 개수에 맞춰서 sql문 완성
			pstmt.setString( 1, id); //1번째에 매개변수로 들어오는 id 넣어주기

			//3. ResultSet
			rs = pstmt.executeQuery(); //select문

			//만약 한 행일거라면
			if(rs.next()) { //중복 O //반드시 한 번은 전진을 시켜줘야한다.
				result = 1; 
			} else {
				result = 0; //중복 X
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {			
			try {
				conn.close();
			} catch (Exception e2) {				
			}
		}

		return result;
	}


	//회원가입
	public void join(UserVO vo) {

		String sql = "insert into users (id, pw, name, email, gender) values(?, ?, ?, ?, ?)";

		Connection conn = null;
		PreparedStatement pstmt = null;

		try {

			conn = DriverManager.getConnection(url, uid, upw);
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, vo.getId() );
			pstmt.setString(2, vo.getPw() );
			pstmt.setString(3, vo.getName() );
			pstmt.setString(4, vo.getEmail());
			pstmt.setString(5, vo.getGender() );

			pstmt.executeUpdate(); //성공시 1, 실패시 0 반환

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
				pstmt.close();
			} catch (Exception e2) {

			}
		}







	}


	//로그인
	public UserVO login(String id, String pw) {

		//int result = 0;
		UserVO vo = null;		

		String sql = "SELECT * FROM USERS WHERE ID =? AND PW =?";

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {

			conn = DriverManager.getConnection(url, uid, upw);

			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,  id);
			pstmt.setString(2,  pw);

			//select 문이니까 쿼리문으로 실행
			rs = pstmt.executeQuery();

			//행이 있거나 없거나
			if( rs.next()) { //필요한 것만 갖고 나오기

				String id2 = rs.getString("id");
				String name = rs.getString("name");
				String email = rs.getString("email");
				String gender = rs.getString("gender");
				Timestamp regdate = rs.getTimestamp("regdate"); //시간형이라 타임스탬프!

				// 이 값들을 실어서 반환해줄 것. 반환 할 때 vo라는 바구니를 쓸 것이다.
				//vo생성해서 담기				
				vo = new UserVO(id2, null, name, email, gender, regdate);

				//vo를 반환시켜야함-> 근데 위의 큰 메서드의 반환타입이 int 이다.
				//-> 그래서 위의 타입을 int를 UserVO로 바꿔줘야함.				

			}


		} catch (Exception e) {

		} finally {
			try {
				conn.close();
				pstmt.close();
				rs.close();
			} catch (Exception e) {

			}
		}

		return vo;

	}



	//회원정보 조회

	public UserVO getInfo(String id) {

		UserVO vo = null;

		String sql = "SELECT * FROM USERS WHERE ID = ?";
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			
			//커넥션에 저장
			conn = DriverManager.getConnection(url, uid, upw);
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, id); //id 
			
			//실행
			rs = pstmt.executeQuery(); 
		
			//1행이니까
			if(rs.next()) { //id는 pk라서 무조건 1행이다.
				//여기서 필요한 정보 다 갖고 나오기
				String id2 = rs.getString("id");
				String name = rs.getString("name");
				String email = rs.getString("email");
				String gender = rs.getString("gender");
				
				vo = new UserVO(id2, null, name, email, gender, null);
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
				pstmt.close();
				rs.close();
			} catch (Exception e2) {
				// TODO: handle exception
			}
		}







	}
}